import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

public class Solver {

	public static void main(String[] args) {

		UniformCost ucs= null;
		Astar astar = null;
		IterativeLenghtening ils= null;

		boolean con = true;
		while(con)	{  //loop for continuing to program
			System.out.println();
			System.out.println("Welcome to diagonal 15 puzzle");
			System.out.println("Please chose an Algorithm below:"); // ask the user which algorithm to run
			System.out.println();
			System.out.println();

			System.out.println("1. UniformCost");
			System.out.println("2. A*");
			System.out.println("3. Iterative Lenghtening");
			System.out.println();
			Scanner scanner = new Scanner(System.in);
			int input = scanner.nextInt();

			System.out.println("Choose depth(2, 4, 6,..., 26, 28)");    //ask the user what the optimum solution depth should be generated

			System.out.println();

			int optimumDepth = scanner.nextInt(); // optimum solution depth that will be used for generating initial state of board


//			int [][] state = {{0, 1, 3, 4}, {12, 13, 2, 5}, {11, 14, 15, 6}, {10, 9, 8, 7}};   //    HOCA a
//			int [][] state = {{1, 3, 5, 4}, {2, 13, 14, 15}, {11, 12, 9, 6}, {0, 10, 8, 7}};   //    HOCA b
//			int [][] state = {{1, 13, 3, 4}, {12, 11, 2, 5}, {9, 8, 15, 7}, {10, 6, 14, 0}};   //    HOCA c

      	    int [][] state = initialStateBuilder(optimumDepth); //initial state of the game is initialized
			BoardNode node = new BoardNode(state); // A board node object is created to keep the properties of the board's current situation

			if(input == 1){   // call uniform cost search algorithm
				ucs = new UniformCost(node);
				ucs.search();
			}
            else if(input == 2){ // call astar algorithm
                System.out.println();
                System.out.println("Please pick a heuristic: "); // ask user to which heuristic will be used
                System.out.println();
                System.out.println("1. Misplaced Tiles");
                System.out.println("2. Manhattan");
                System.out.println("3. New Heuristic Function");
                System.out.println();
                int input3 = scanner.nextInt();


                switch(input3){ // switch case for deciding which heuristic will be used
                    case 1:
                        astar = new Astar(node,1); // calls the heuristic function which will be used the number of misplaced tiles
                        break;
                    case 2:
						astar = new Astar(node,2); // calls the heuristic function which will be used the sum of the city-block distances of each misplaced tile from its current location to its goal location
                        break;
                    case 3:
						astar = new Astar(node,3); // calls the heuristic function which is the new heuristic function that generated by us
                        break;
                }
				astar.search();
            }
            else if(input == 3){ // call iterative lenghtening algorithm
                ils = new IterativeLenghtening(node);
                ils.search();

            }

//			System.out.println("The search will begin: ");
//			search.search(); //the search starts
			System.out.println("Do you want to continue?"); //ask to user if it wants to continue program or not
			System.out.println();
			System.out.println("1. Yes");
			System.out.println("2. No");
			int input5 = scanner.nextInt();
			if(input5==2)
				con = false;
		}
	}


	public static int[][] initialStateBuilder(int actionNumber){ // method for initializing the state of the board according to optimum solution depth which taken from the user
		int state[][] = {{1,2,3,4},{12,13,14,5},{11,0,15,6},{10,9,8,7}};

		int col = 1;
		int row = 2;

		int randomNum;
		int previousDir = 0;
		boolean firstAction = true;
		int temp;

		for(int i = 0; i < actionNumber; i++){

//			System.out.println(i + ". adÄ±m: ");
//			for(int j=0; j<4;j++){
//				for(int k=0; k<4;k++){
//					System.out.print(state[j][k] + " ");
//				}
//				System.out.println("");
//
//			}

			randomNum = ThreadLocalRandom.current().nextInt(0, 8); //generated random number to select which action to be done

			if(row != 0 && randomNum == 0) {  //UP
				if(previousDir != 1){
					if(firstAction)
						firstAction = false;
					previousDir = randomNum;
					temp = state[row-1][col];
					state[row-1][col] = 0;
					state[row][col] = temp;
					row = row - 1;
				}
				else{ //decrement i if it wants to illegal movement
					i--;
				}
			}

			else if(row != 3 && randomNum == 1) {  //DOWN
				if(previousDir != 0 || firstAction){
					firstAction = false;
					previousDir = randomNum;
					temp = state[row+1][col];
					state[row+1][col] = 0;
					state[row][col] = temp;
					row = row + 1;
				}
				else{
					i--;
				}
			}

			else if(col != 3 && randomNum == 2) {  //RIGHT
				if(previousDir != 3){
					if(firstAction)
						firstAction = false;
					previousDir = randomNum;
					temp = state[row][col+1];
					state[row][col+1] = 0;
					state[row][col] = temp;
					col = col + 1;
				}
				else{
					i--;
				}
			}

			else if(col != 0 && randomNum == 3) {  //LEFT
				if(previousDir != 2){
					if(firstAction)
						firstAction = false;
					previousDir = randomNum;
					temp = state[row][col-1];
					state[row][col-1] = 0;
					state[row][col] = temp;
					col = col - 1;
				}
				else{
					i--;
				}
			}

			else if(row != 0 && col != 3 && randomNum == 4) {  //UPPER RIGHT
				if(previousDir != 7){
					if(firstAction)
						firstAction = false;
					previousDir = randomNum;
					temp = state[row-1][col+1];
					state[row-1][col+1] = 0;
					state[row][col] = temp;
					row = row - 1;
					col = col + 1;
				}
				else{
					i--;
				}
			}

			else if(row != 0 && col != 0 && randomNum == 5) {  //UPPER LEFT
				if(previousDir != 6){
					if(firstAction)
						firstAction = false;
					previousDir = randomNum;
					temp = state[row-1][col-1];
					state[row-1][col-1] = 0;
					state[row][col] = temp;
					row = row - 1;
					col = col - 1;
				}
				else{
					i--;
				}
			}

			else if(row != 3 && col != 3 && randomNum == 6) {  //LOWER RIGHT
				if(previousDir != 5){
					if(firstAction)
						firstAction = false;
					previousDir = randomNum;
					temp = state[row+1][col+1];
					state[row+1][col+1] = 0;
					state[row][col] = temp;
					row = row + 1;
					col = col + 1;
				}
				else{
					i--;
				}
			}

			else if(row != 3 && col != 0 && randomNum == 7) {  //LOWER LEFT
				if(previousDir != 4){
					if(firstAction)
						firstAction = false;
					previousDir = randomNum;
					temp = state[row+1][col-1];
					state[row+1][col-1] = 0;
					state[row][col] = temp;
					row = row + 1;
					col = col - 1;
				}
				else{
					i--;
				}
			}
			else{
				i--;
			}

		}

			for(int y = 0; y < state.length; y++){
				System.out.print(Arrays.toString(state[y]));
				System.out.println();
			}

		return state;
	}

	

	
}

	




